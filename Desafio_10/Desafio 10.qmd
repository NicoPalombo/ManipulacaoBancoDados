---
title: "Desafio 10"
format: html
editor: visual
---

## Rodando os códigos referentes a aula Introdução ao Polars:

```{python}
import polars as pl 
```

```{python}
#Lendo os arquivos referentes ao documento airports.csv
aeroporto = pl.read_csv("./dados/airports.csv",
columns = ["IATA_CODE","CITY","STATE"])
aeroporto.head(2)
```

```{python}
# Lendo uma planilha Excel contendo países e regiões
# Utiliza a aba "Country" e carrega apenas as colunas selecionadas
wd = pl.read_excel("./dados/WDIEXCEL.xlsx", sheet_name = "Country", columns = ["Short Name", "Region"])
wd.head(2)
```


```{python}
# Criando manualmente um DataFrame para testes, com valores nulos incluídos
df = pl.DataFrame({
  "grupo":["A","A","B","B","C"],
  "valor1":[10, 15, 10, None, 25],
  "valor2":[5, None, 20, 30, None]
})
df
```

```{python}
df["valor1"] # Acessando a coluna "valor1" diretamente

df["valor1"].mean() # Calculando a média da coluna, incluindo valores nulos (o resultado será nulo) 
```

```{python}
df["valor1"].drop_nulls() # Removendo os valores nulos da coluna "valor1"

df["valor1"].drop_nulls().mean() # Calculando a média da coluna "valor1" após remover os nulos

```

```{python}
# Calculando as médias de "valor1" e "valor2" em um único comando

df.select([
  pl.col("valor1").mean().alias("media_v1"),
  pl.col("valor2").mean()
])
```

```{python}
# Agrupando os dados pelo grupo e calculando estatísticas agregadas:
# - Média de valor1
# - Mínimo de valor2
df.group_by("grupo").agg([
  pl.col("valor1").mean().alias("media_valor1"),
  pl.col("valor2").min().alias("min_valor2")
]).sort("grupo")
```

```{python}
# Lendo o arquivo de voos e definindo o tipo de dado esperado para cada coluna

voos = pl.read_csv(
    "./dados/flights.csv",
    columns=["AIRLINE", "ARRIVAL_DELAY", "DESTINATION_AIRPORT"],
    schema_overrides={
        "AIRLINE": pl.Utf8,
        "ARRIVAL_DELAY": pl.Int32,
        "DESTINATION_AIRPORT": pl.Utf8
    }
)
# Verificando o tamanho e as primeiras linhas do DataFrame

voos.shape
voos.head(3)
```

```{python}
# Filtrando voos com informações completas e atrasos superiores a 30 minutos
# Apenas para as companhias AA e DL, e destinos SEA, MIA e BWI
resultado = (
  voos.drop_nulls(["AIRLINE", "DESTINATION_AIRPORT", "ARRIVAL_DELAY"])
  .filter(
    pl.col("AIRLINE").is_in(["AA", "DL"]) &
    pl.col("DESTINATION_AIRPORT").is_in(["SEA", "MIA", "BWI"])
    )
    .group_by(["AIRLINE", "DESTINATION_AIRPORT"])
    .agg([
      (pl.col("ARRIVAL_DELAY") > 30).mean().alias("atraso_medio")
      ])
)
resultado.sort("atraso_medio")
```

# Resolvendo o slide "Dados Relacionais com Polars"

```{python}
# Criando um DataFrame com dados de clientes
clientes = pl.DataFrame({
    "cliente_id": [1, 2, 3, 4],
    "nome": ["Ana", "Bruno", "Clara", "Daniel"]
})

print(clientes)
```

```{python}
# Criando um DataFrame com pedidos feitos por clientes

pedidos = pl.DataFrame({
    "pedido_id": [101, 102, 103, 104, 105],
    "cliente_id": [1, 2, 3, 1, 5],
    "valor": [100.50, 250.75, 75.00, 130.00, 79.00]
})

print(pedidos)
```

```{python}
# INNER JOIN: apenas os clientes que têm pedidos

res_ij = clientes.join(pedidos, on="cliente_id", how="inner")
print(res_ij)
```

```{python}
# LEFT JOIN: todos os clientes, com os pedidos se existirem

res_lj = clientes.join(pedidos, on="cliente_id", how="left")
print(res_lj)
```

```{python}
# RIGHT JOIN: todos os pedidos, com dados dos clientes quando houver correspondência

res_rj = clientes.join(pedidos, on="cliente_id", how="right")
print(res_rj)
```

```{python}
# FULL JOIN: todos os clientes e todos os pedidos, mesmo sem correspondência

res_oj = clientes.join(pedidos, on="cliente_id", how="full")
print(res_oj)
```

```{python}
# CROSS JOIN: produto cartesiano entre clientes e pedidos

res_cj = clientes.join(pedidos, how="cross")
print(res_cj)
```

**Qual é o valor médio das compras realizadas para cada cliente identificado?**

```{python}
res = res_ij.group_by(["nome", "cliente_id"]).agg(pl.col("valor").mean())
print(res)
```

**Informe os nomes e a quantidade de compras com valor mínimo de \$100.00 realizadas por cada cliente.**

```{python}
res = (res_oj.with_columns(pl.col("valor") > 100)
       .group_by("nome")
       .agg(pl.col("valor").sum()))
print(res)
```

```{python}
# Fazendo um JOIN com múltiplas chaves entre dois DataFrames
vendas = pl.DataFrame({
    "id_venda": [1, 2, 3],
    "id_cl": [1, 2, 1],
    "id_prod": [101, 102, 103],
    "qtde": [2, 1, 1]
})

detalhes_pedidos = pl.DataFrame({
    "id_ped": [201, 202, 203],
    "cl_id": [1, 2, 1],
    "id_prod": [101, 102, 104],
    "valor": [50.00, 75.00, 100.00]
})
# Fazendo o join com múltiplas colunas (cliente e produto)

final = vendas.join(detalhes_pedidos,
                    left_on = ["id_cl", "id_prod"],
                    right_on = ["cl_id", "id_prod"],
                    how = "inner")
print(final)
```

```{python}
# Imprimindo o dia e hora de execução do código

from datetime import datetime
print("Arquivo compilado em:", datetime.now().strftime("%d/%m/%Y %H:%M:%S"))
```

